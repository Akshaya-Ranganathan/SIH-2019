# -*- coding: utf-8 -*-
"""rssParser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CErxDuCdvmwDznvtR-_nFtUEfAVs4mT-
"""

#Install Dependencies
!pip3 install newspaper3k
!pip install python-google-places
!pip install python-google-places
!pip install articleDateExtractor
nltk.download('vader_lexicon')
nltk.download('punkt')
nltk.download('wordnet')


#Import packages
import nltk
from scipy.interpolate import griddata
import numpy as np
import operator
import pandas as pd
from scipy import spatial
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import newspaper
import spacy
import articleDateExtractor
import operator
import csv
import feedparser
import re
from difflib import SequenceMatcher
from google.colab import files
from newspaper import Article
from googleplaces import GooglePlaces, types, lang
from nltk.corpus import wordnet
YOUR_API_KEY = 'AIzaSyClIseDxVsZxDT0gx4k1Vaif93Zx_b-E_A'
google_places = GooglePlaces(YOUR_API_KEY)



!rm MainDataset2\ \(1\).csv MainDataset2.csv pre-processed-mastertable.csv pre-processed-mastertable2.csv pre-processed-mastertable2\ \(1\).csv
files.upload()

def similar(word,dictionary):
    for key in dictionary.keys():
      if SequenceMatcher(None, word, key.split(' ')[0]).ratio() >= 0.8:
        return key
    return '0'
  
  
def similar2(word,words):
    for key in words:
      if SequenceMatcher(None, word, key.split(' ')[0]).ratio() >= 0.8:
        return key
    return False
  
  
masterTable = pd.read_csv('pre-processed-mastertable2.csv')
keywordCategories = pd.read_csv('catgories.csv')
titleCategories = pd.read_csv('catgories2.csv')
link = 'https://indianexpress.com/article/india/crime/bihar-religious-leader-held-for-sexual-abuse-5562072/'
gridM = np.load('murderModel' + '.npy')
gridR = np.load('rapeModel' + '.npy')
gridDV = np.load('domesticModel' + '.npy')
gridT = np.load('theftModel' + '.npy')
gridF = np.load('fraudModel' + '.npy')
gridD = np.load('drugModel' + '.npy')

def findCategory(title,keywords):
  if title != 'nan':
    for i,row in titleCategories.iterrows():
      if similar2(title,str(row['Keyword']).split(' ')):
        return row['Category']
  for i,row in keywordCategories.iterrows():
    for keyword in keywords.split(' '):
      if similar2(keyword,str(row['Keyword']).split(' ')):
        return row['Category']
      
      
def convertTimetoCategoricalValue(time):
	hour = time.split(':')[0]
	hour = int(hour)
	if hour >= 5 and hour < 12:
		return 1
	elif hour >= 12 and hour < 16:
		return 2
	elif hour >= 16 and hour < 21:
		return 3
	else:
		return 4
  
  
  
minLat = 28.4752049
maxLat = 28.8059341
minLong = 76.9504542
maxLong = 77.4538




def getIntensity(lat,lng):
	if lat < minLat or lat > maxLat or lng < minLong or lng > maxLong:
		return 0.0
	x = (lat - minLat)/(maxLat - minLat) * len(gridM)
	y = (lng - minLong)/(maxLong - minLong) * len(gridM)
	intensity = dict()
	average = 0
	count = 0
	flag = 1
	try:
		intensity['Murder'] = gridM[int(round(x))][int(round(y))] 
		if intensity['Murder'] != 0:
			average += intensity['Murder']
			count += 1
			flag = 0
		intensity['Rape'] = gridR[int(round(x))][int(round(y))]
		if intensity['Rape'] != 0:
			average += intensity['Rape']
			count += 1
			flag = 0
		intensity['DomesticViolence'] = gridDV[int(round(x))][int(round(y))]
		if intensity['DomesticViolence'] != 0:
			average += intensity['DomesticViolence']
			count += 1
			flag = 0
		intensity['Theft'] = gridT[int(round(x))][int(round(y))]
		if intensity['Theft'] != 0:
			average += intensity['Theft']
			count += 1
			flag = 0
		intensity['Fraud'] = gridF[int(round(x))][int(round(y))]
		if intensity['Fraud'] != 0:
			average += intensity['Fraud']
			count += 1
		intensity['Drugs'] = gridD[int(round(x))][int(round(y))]
		if intensity['Drugs'] != 0:
			average += intensity['Drugs']
			count += 1
			flag = 0
	except:
		return 0.0
	TOC = max(intensity.items(), key=operator.itemgetter(1))[0]
	if flag == 1:
		average = 0
	else:
		average /= count
	# severity = intensity[TOC]
	return average


#Model Constants

intercept = 0.928568881
timeSlope = 0.247609499
trafficSlope =	-0.004666748
policeSlope =	0.102761641
populationSlope =	0.207043419
intensitySlope	 = 0.009338735

latLong = []
for i,row in masterTable.iterrows():
  latLong += [(row[5],row[6])]

#Everything in a single function
def multipleLinearRegression(lat,lng):
  tree = spatial.KDTree(latLong)
  dist = tree.query([(float(lat),float(lng))])[0][0]
  index = tree.query([(float(lat),float(lng))])[1][0]
  PoliceStations = masterTable['PoliceStations'][index]
  Population = masterTable['c-population'][index]
  Traffic = masterTable['c-traffic'][index]
  Time = masterTable['C-time'][index]
  Intensity = getIntensity(lat,lng)
  Severity = (timeSlope * Time) + (trafficSlope * Traffic) + (policeSlope * PoliceStations) +  (populationSlope * Population) + (intensitySlope * Intensity) + intercept
  return [PoliceStations,Time,Population,Traffic,Intensity,Severity]


import feedparser


class CrimeRSS():
	feedURL = ""

	def __init__(self,rssURL):
		print(rssURL)
		self.feedURL = rssURL

	def parse(self):
		thefeed = feedparser.parse(self.feedURL)
		print("Getting the feed")
		print(thefeed.feed.get("title",""))
		print(thefeed.feed.get("link",""))
		print(thefeed.feed.get("pubDate",""))

		rssList = []
		for thefeedentry in thefeed.entries:
			title = thefeedentry.get("title","")
			link = thefeedentry.get("link","")
			rssList += [(title,link)]
		return rssList

rssObject = CrimeRSS("https://indianexpress.com/section/india/crime/feed/")

writeFile1 = open('pre-processed-mastertable.csv','a') 
writer1 = csv.writer(writeFile1)

writeFile2 = open('MainDataset2.csv','a') 
writer2 = csv.writer(writeFile2)


row = []
writer1.writerow(row)
writer2.writerow(row)

for RSStitle,link in rssObject.parse():
  url = link
  toi_article = Article(url, language="en") 
  toi_article.download() 
  try:
    toi_article.parse() 
    toi_article.nlp()
  except:
    pass
  sid = SentimentIntensityAnalyzer()
  crime_keywords = []
  crime_rating = []
  intensity = 0
  time = ''
  timeDict = {'afternoon':2,'daytime':2,'dusk':3,'evening':3,'midnight':4,'morning':1,'night:':4,'nighttime':4,'noon':2,'sunrise':2,'sunset':3}
  for keyword in str(toi_article.summary).split(' ') :
    if keyword.lower() in timeDict.keys():
      time = timeDict[keyword.lower()]
    elif re.match('[0-9]+pm',keyword) or re.match('[0-9]+am',keyword):
      time =  convertTimetoCategoricalValue(keyword)
    sentiment = sid.polarity_scores(keyword)
    if sentiment['compound'] < 0.0 :
      crime_keywords = crime_keywords + [keyword]
      crime_rating = crime_rating + [{keyword:sentiment['compound']}]
      intensity += sentiment['compound']      
  #Article Category
  categoryList = []
  for word in str(RSStitle).split(' '):
    sentiment = sid.polarity_scores(word)
    if sentiment['compound'] < 0.0 :
      categoryList = categoryList + [word]
  #Lat Long and Area Name
  nlp = spacy.load('en_core_web_sm')
  doc = nlp(toi_article.summary)
  propernouns = dict()
  previousToken = ''
  for token in doc:
    if token.pos_ == 'PROPN':
      if previousToken.istitle():
        tokenText = previousToken + ' ' + str(token.text).lower()
        propernouns.pop(previousToken, None)
      else:
        tokenText = str(token.text).lower()
      if tokenText in propernouns.keys() :
        propernouns[tokenText] += 1
      else :
        propernouns[tokenText] = 1
    previousToken = token.text      
  for noun in sorted(propernouns.items(), key = lambda kv: kv[1], reverse = 1):
    query_result = google_places.text_search(query=str(noun[0]) + ' delhi')
    if query_result.has_attributions:
        print(query_result.html_attributions)
    if len(query_result.places) == 1 :
      if query_result.places[0].name != 'Delhi' :
        lat = query_result.places[0].geo_location['lat']
        long = query_result.places[0].geo_location['lng']
        location = query_result.places[0].name
        break
    else :
      lat = 'NULL'
      long = 'NULL'
      location = 'NULL' 
  time = str(time).replace('.','').replace('\r','').replace('\n','').replace(',','').replace('"','').replace(':','')
  keyword = str(keyword).replace('.','').replace('\r','').replace('\n','').replace(',','').replace('"','').replace(':','')
  link = str(link).replace('\n','')
  category = findCategory(' '.join(categoryList),' '.join(crime_keywords))
  if location != 'NULL':
    values = multipleLinearRegression(float(lat),float(long))
    Intensity = values[-2]
    if time == '':
      row = [location] + values[:-3] + [lat,long] + values[-2:]
    else :
      row = [location] + values[0] + [time] + values[3:4] + [lat,long] + values[-2:]
  else:
    Intensity = 0
    printf('Unable to find Location:')
  row2 = ['Delhi',location,' '.join(categoryList),' '.join(crime_keywords),lat,long,category,values[2]]
  #Result of this code
  print('Location: ',location)
  print('Crime Keywords: ',crime_keywords)
  print('Category concluded: ',category)
  print('Lattitude: ',lat)
  print('Longitude: ',long)
  print('Time Zone: ',time)
  print('Intensity: ',Intensity)
  # writer.writerow(row)
  writer1.writerow(row)
  writer2.writerow(row2)
  break




writeFile1.close()
files.download('pre-processed-mastertable.csv')
writeFile2.close()
files.download('MainDataset2.csv')

!rm MainDataset2\ \(1\).csv MainDataset2.csv pre-processed-mastertable.csv pre-processed-mastertable2.csv pre-processed-mastertable2\ \(1\).csv
files.upload()

data = pd.read_csv('MainDataset2.csv')

def distance(lat1,long1,lat2,long2):
  return ((lat1-lat2)**2 + (long1-long2)**2)**-2

def distance2(lat1,long1,lat2,long2):
  return abs(lat1-lat2) + abs(long1-long2)


def itsOkaytoAddZero(lat,long,location):
  for [lat2,long2] in location:
    if distance(lat,long,lat2,long2) < 0.001:
      return False
  return True


def itsOkaytoAddZero2(lat,long,location):
  for [lat2,long2] in location:
    if distance2(lat,long,lat2,long2) < 0.035:
      return False
  return True

locationM = []
locationR = []
locationDV = []
locationT = []
locationF = []
locationD = []

lat = []
long = []

latM = []
longM = []
latR = []
longR = []
latDV = []
longDV = []
latT = []
longT = []
latF = []
longF = []
latD = []
longD = []


zM = []
zR = []
zDV = []
zT = []
zF = []
zD = []


for i,row in data.iterrows():
  roundedLat = row[4]
  roundedLong = row[5]
  lat += [roundedLat]
  long += [roundedLong]
  if row[6] == 'Murder':
    latM += [roundedLat]
    longM += [roundedLong]
    locationM += [[roundedLat,roundedLong]]
    zM += [100]
  elif row[6] == 'Rape':
    latR += [roundedLat]
    longR += [roundedLong]
    locationR += [[roundedLat,roundedLong]]
    zR += [100]
  elif row[6] == 'Domestic Violence':
    latDV += [roundedLat]
    longDV += [roundedLong]
    locationDV += [[roundedLat,roundedLong]]
    zDV += [100]
  elif row[6] == 'Theft':
    latT += [roundedLat]
    longT += [roundedLong]
    locationT += [[roundedLat,roundedLong]]
    zT += [100]
  elif row[6] == 'Fraud':
    latF += [roundedLat]
    longF += [roundedLong]
    locationF += [[roundedLat,roundedLong]]
    zF += [100]
  elif row[6] == 'Drugs':
    latD += [roundedLat]
    longD += [roundedLong]
    locationD += [[roundedLat,roundedLong]]
    zD += [100]
    
    
minLat = sorted(lat)[2]
maxLat = sorted(lat)[-3]
minLong = sorted(long)[3]
maxLong = sorted(long)[-3]


zeroLat = np.arange(minLat,maxLat,0.05)
zeroLong = np.arange(minLong,maxLong,0.05)
for lt in zeroLat:
  for lng in zeroLong:
    if itsOkaytoAddZero2(lt,lng,locationM):
      locationM += [[lt,lng]]
      zM += [0]
    if itsOkaytoAddZero(lt,lng,locationR):
      locationR += [[lt,lng]]
      zR += [0]
    if itsOkaytoAddZero(lt,lng,locationDV):
      locationDV += [[lt,lng]]
      zDV += [0]
    if itsOkaytoAddZero(lt,lng,locationT):
      locationT += [[lt,lng]]
      zT += [0]
    if itsOkaytoAddZero(lt,lng,locationF):
      locationF += [[lt,lng]]
      zF += [0]
    if itsOkaytoAddZero(lt,lng,locationD):
      locationD += [[lt,lng]]
      zD += [0]
    
LocationM = np.asarray(locationM,dtype = float)
LocationR = np.asarray(locationR,dtype = float)
LocationDV = np.asarray(locationDV,dtype = float)
LocationT = np.asarray(locationT,dtype = float)
LocationF = np.asarray(locationF,dtype = float)
LocationD = np.asarray(locationD,dtype = float)


ZM = np.asarray(zM,dtype = int)
ZR = np.asarray(zR,dtype = int)
ZDV = np.asarray(zDV,dtype = int)
ZT = np.asarray(zT,dtype = int)
ZF = np.asarray(zF,dtype = int)
ZD = np.asarray(zD,dtype = int)

grid_x, grid_y = np.mgrid[minLat:maxLat:0.005,minLong:maxLong:0.005]

gridM = griddata(LocationM, ZM, (grid_x, grid_y), method='linear',fill_value=0.1)
gridR = griddata(LocationR, ZR, (grid_x, grid_y), method='linear',fill_value=0.1)
gridDV = griddata(LocationDV, ZDV, (grid_x, grid_y), method='linear',fill_value=0.1)
gridT = griddata(LocationT, ZT, (grid_x, grid_y), method='linear',fill_value=0.1)
gridF = griddata(LocationF, ZF, (grid_x, grid_y), method='linear',fill_value=0.1)
gridD = griddata(LocationD, ZD, (grid_x, grid_y), method='linear',fill_value=0.1)



import matplotlib.pyplot as plt
# plt.subplot(221)
# plt.imshow(func(grid_x, grid_y).T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
# plt.plot(Location[:,0], Location[:,1], 'ro', ms=1)
# # plt.plot(lat, long, 'k.', ms=1)


plt.subplot(231)
plt.imshow(gridM.T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
plt.title('Murder')


plt.subplot(232)
plt.imshow(gridR.T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
plt.title('Rape')


plt.subplot(233)
plt.imshow(gridDV.T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
plt.title('Domestic Violence')


plt.subplot(234)
plt.imshow(gridT.T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
plt.title('Theft')


plt.subplot(235)
plt.imshow(gridF.T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
plt.title('Fraud')


plt.subplot(236)
plt.imshow(gridD.T, extent=(minLat,maxLat,minLong,maxLong), origin='lower')
plt.title('Drugs')


plt.gcf().set_size_inches(15,30)
plt.show()

def getIntensity(lat,long):
  x = (lat - minLat)/(maxLat - minLat) * len(gridM)
  y = (long - minLong)/(maxLong - minLong) * len(gridM)
  intensity = dict()

  intensity['Murder'] = gridM[round(x)][round(y)] 
  intensity['Rape'] = gridR[round(x)][round(y)] 
  intensity['DomesticViolence'] = gridDV[round(x)][round(y)]
  intensity['Theft'] = gridT[round(x)][round(y)]
  intensity['Fraud'] = gridF[round(x)][round(y)]
  intensity['Drugs'] = gridD[round(x)][round(y)]
  print(intensity)
  print(max(intensity.items(), key=operator.itemgetter(1))[0])